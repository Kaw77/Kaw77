<!DOCTYPE html><html><head><title>JavaScript Loan Calculator</title><style> /* Esta é uma folha de estilos CSS: ela adiciona estilo na saída do programa */.output { font-weight: bold; }#payment { text-decoration: underline; }#graph { border: solid black 1px; }th, td { vertical-align: top; }</style></head><body><!--/* Valores calculados em negrito *//* Para elemento com id="payment" *//* O gráfico tem borda simples *//* Não centraliza células da tabela */Esta é uma tabela HTML com elementos <input> que permitem ao usuário inserir dados eelementos <span> nos quais o programa pode exibir seus resultados. Esses elementos têmidentificações como "interest" e "years". Essas identificações são usadas no códigoJavaScript que vem após a tabela. Note que alguns dos elementos de entrada definemrotinas de tratamento de evento "onchange" ou "onclick". Elas especificam strings decódigo JavaScript a ser executado quando o usuário insere dados ou dá um clique.--><table><tr><th>Enter Loan Data:</th><td></td><th>Loan Balance, Cumulative Equity, and Interest Payments</th></tr><tr><td>Amount of the loan ($):</td><td><input id="amount" onchange="calculate();"></td><td rowspan=8><canvas id="graph" width="400" height="250"></canvas></td></tr><tr><td>Annual interest (%):</td><td><input id="apr" onchange="calculate();"></td></tr><tr><td>Repayment period (years):</td><td><input id="years" onchange="calculate();"></td><tr><td>Zipcode (to find lenders):</td><td><input id="zipcode" onchange="calculate();"></td><tr><th>Approximate Payments:</th><td><button onclick="calculate();">Calculate</button></td></tr><tr><td>Monthly payment:</td><td>$<span class="output" id="payment"></span></td></tr><tr><td>Total payment:</td><td>$<span class="output" id="total"></span></td></tr>
<tr><td>Total interest:</td><td>$<span class="output" id="totalinterest"></span></td></tr><tr><th>Sponsors:</th><td colspan=2>Apply for your loan with one of these fine lenders:<div id="lenders"></div></td></tr></table><!-- O restante deste exemplo é código JavaScript na marca <script> a seguir --><!-- Normalmente, este script ficaria na marca <head> do documento acima, mas --><!-- é mais fácil entendê-lo aqui, depois de ter visto seu contexto HTML. --><script>"use strict"; // Usa o modo restrito da ECMAScript 5 nos navegadores que o suportam/** Este script define a função calculate() chamada pelas rotinas de tratamento de evento* no código HTML acima. A função lê valores de elementos <input>, calcula* as informações de pagamento de empréstimo, exibe o resultado em elementos <span>.* Também salva os dados do usuário, exibe links para financeiras e desenha um gráfico.*/function calculate() {// Pesquisa os elementos de entrada e saída no documentovar amount = document.getElementById("amount");var apr = document.getElementById("apr");var years = document.getElementById("years");var zipcode = document.getElementById("zipcode");var payment = document.getElementById("payment");var total = document.getElementById("total");var totalinterest = document.getElementById("totalinterest");//Obtém a entrada do usuário através dos elementos de entrada. Presume que tudo isso// é válido.// Converte os juros de porcentagem para decimais e converte de taxa// anual para taxa mensal. Converte o período de pagamento em anos// para o número de pagamentos mensais.var principal = parseFloat(amount.value);var interest = parseFloat(apr.value) / 100 / 12;var payments = parseFloat(years.value) * 12;// Agora calcula o valor do pagamento mensal.var x = Math.pow(1 + interest, payments); // Math.pow() calcula potênciasvar monthly = (principal*x*interest)/(x-1);// Se o resultado é um número finito, a entrada do usuário estava correta e// temos resultados significativos para exibirif (isFinite(monthly)) {// Preenche os campos de saída, arredondando para 2 casas decimaispayment.innerHTML = monthly.toFixed(2);total.innerHTML = (monthly * payments).toFixed(2);totalinterest.innerHTML = ((monthly*payments)-principal).toFixed(2);//Salva a entrada do usuário para que possamos recuperá-la na próxima vez que// ele visitarsave(amount.value, apr.value, years.value, zipcode.value);
// Anúncio: localiza e exibe financeiras locais, mas ignora erros de redetry { // Captura quaisquer erros que ocorram dentro destas chavesgetLenders(amount.value, apr.value, years.value, zipcode.value);}catch(e) { /* E ignora esses erros */ }//Por fim, traça o gráfico do saldo devedor, dos juros e dos pagamentos docapitalchart(principal, interest, monthly, payments);}else {//O resultado foi Not-a-Number ou infinito, o que significa que a entrada//estava incompleta ou era inválida. Apaga qualquer saída exibida anteriormente.payment.innerHTML = ""; // Apaga o conteúdo desses elementostotal.innerHTML = ""totalinterest.innerHTML = "";chart();// Sem argumentos, apaga o gráfico}}// Salva a entrada do usuário como propriedades do objeto localStorage. Essas// propriedades ainda existirão quando o usuário visitar no futuro// Esse recurso de armazenamento não vai funcionar em alguns navegadores (o Firefox, por// exemplo), se você executar o exemplo a partir de um arquivo local:// URL. Contudo,// funciona com HTTP.function save(amount, apr, years, zipcode) {if (window.localStorage) { // Só faz isso se o navegador suportarlocalStorage.loan_amount = amount;localStorage.loan_apr = apr;localStorage.loan_years = years;localStorage.loan_zipcode = zipcode;}}// Tenta restaurar os campos de entrada automaticamente quando o documento é carregado// pela primeira vez.window.onload = function() {// Se o navegador suporta localStorage e temos alguns dados armazenadosif (window.localStorage && localStorage.loan_amount) {document.getElementById("amount").value = localStorage.loan_amount;document.getElementById("apr").value = localStorage.loan_apr;document.getElementById("years").value = localStorage.loan_years;document.getElementById("zipcode").value = localStorage.loan_zipcode;}};// Passa a entrada do usuário para um script no lado do servidor que (teoricamente) pode// retornar// uma lista de links para financeiras locais interessadas em fazer empréstimos. Este// exemplo não contém uma implementação real desse serviço de busca de financeiras. Mas// se o serviço existisse, essa função funcionaria com ele.function getLenders(amount, apr, years, zipcode) {// Se o navegador não suporta o objeto XMLHttpRequest, não faz nadaif (!window.XMLHttpRequest) return;// Localiza o elemento para exibir a lista de financeirasvar ad = document.getElementById("lenders");if (!ad) return; // Encerra se não há ponto de saída// Codifica a entrada do usuário como parâmetros de consulta em um URLvar url = "getLenders.php" +"?amt=" + encodeURIComponent(amount) +"&apr=" + encodeURIComponent(apr) +"&yrs=" + encodeURIComponent(years) +"&zip=" + encodeURIComponent(zipcode);// Url do serviço mais// dados do usuário na string// de consulta// Busca o conteúdo desse URL usando o objeto XMLHttpRequestvar req = new XMLHttpRequest(); // Inicia um novo pedidoreq.open("GET", url);req.send(null);// Um pedido GET da HTTP para o url// Envia o pedido sem corpo//Antes de retornar, registra uma função de rotina de tratamento de evento que será// chamada em um momento posterior, quando a resposta do servidor de HTTP chegar.// Esse tipo de programação assíncrona é muito comum em JavaScript do lado do// cliente.req.onreadystatechange = function() {if (req.readyState == 4 && req.status == 200) {//Se chegamos até aqui, obtivemos uma resposta HTTP válida e completavar response = req.responseText;// Resposta HTTP como stringvar lenders = JSON.parse(response); // Analisa em um array JS// Converte o array de objetos lender em uma string HTMLvar list = "";for(var i = 0; i < lenders.length; i++) {list += "<li><a href='" + lenders[i].url + "'>" +lenders[i].name + "</a>";}// Exibe o código HTML no elemento acima.ad.innerHTML = "<ul>" + list + "</ul>";}}}// Faz o gráfico do saldo devedor mensal, dos juros e do capital em um elemento <canvas>// da HTML.// Se for chamado sem argumentos, basta apagar qualquer gráfico desenhado anteriormente.function chart(principal, interest, monthly, payments) {var graph = document.getElementById("graph");// Obtém a marca <canvas>graph.width = graph.width;// Mágica para apagar e redefinir o elemento// canvas// Se chamamos sem argumentos ou se esse navegador não suporta// elementos gráficos em um elemento <canvas>, basta retornar agora.if (arguments.length == 0 || !graph.getContext) return;// Obtém o objeto "contexto" de <canvas> que define a API de desenhovar g = graph.getContext("2d"); // Todo desenho é feito com esse objetovar width = graph.width, height = graph.height;// Obtém o tamanho da tela de desenho//
//Essas funções convertem números de pagamento e valores monetários em pixelsfunction paymentToX(n) { return n * width/payments; }function amountToY(a) { return height-(a * height/(monthly*payments*1.05));}// Os pagamentos são uma linha reta de (0,0) a (payments, monthly*payments)g.moveTo(paymentToX(0), amountToY(0));g.lineTo(paymentToX(payments),amountToY(monthly*payments));// Começa no canto inferior esquerdo//Desenha até o canto superior direitog.lineTo(paymentToX(payments), amountToY(0));// Para baixo, até o canto// inferior direitog.closePath();g.fillStyle = "#f88";g.fill();g.font = "bold 12px sans-serif";// E volta ao início// Vermelho-claro// Preenche o triângulo// Define uma fonteg.fillText("Total Interest Payments", 20,20);// Desenha texto na legenda//O capital acumulado não é linear e é mais complicado de representar no gráficovar equity = 0;g.beginPath();g.moveTo(paymentToX(0), amountToY(0));// Inicia uma nova figura// começando no canto inferior// esquerdofor(var p = 1; p <= payments; p++) {// Para cada pagamento, descobre quanto é o jurovar thisMonthsInterest = (principal-equity)*interest;equity += (monthly – thisMonthsInterest);g.lineTo(paymentToX(p),amountToY(equity));}g.lineTo(paymentToX(payments), amountToY(0));g.closePath();g.fillStyle = "green";g.fill();g.fillText("Total Equity", 20,35);// O resto vai para o capital// Linha até este ponto// Linha de volta para o eixo X// E volta para o ponto inicial// Agora usa tinta verde//E preenche a área sob a curva// Rotula em verde//Faz laço novamente, como acima, mas representa o saldo devedor como uma linha// preta grossa no gráficovar bal = principal;g.beginPath();g.moveTo(paymentToX(0),amountToY(bal));for(var p = 1; p <= payments; p++) {var thisMonthsInterest = bal*interest;bal -= (monthly – thisMonthsInterest);g.lineTo(paymentToX(p),amountToY(bal));}g.lineWidth = 3;g.stroke();g.fillStyle = "black";g.fillText("Loan Balance", 20,50);// O resto vai para o capital//Desenha a linha até esse ponto// Usa uma linha grossa// Desenha a curva do saldo// Troca para texto preto// Entrada da legenda// Agora faz marcações anuais e os números de ano no eixo Xg.textAlign="center";var y = amountToY(0);for(var year=1; year*12 <= payments; year++) {var x = paymentToX(year*12);g.fillRect(x-0.5,y-3,1,3);if (year == 1) g.fillText("Year", x, y-5);// Centraliza o texto nas// marcas// Coordenada Y do eixo X// Para cada ano// Calcula a posição da marca// Desenha a marca// Rotula o eixo
if (year % 5 == 0 && year*12 !== payments)g.fillText(String(year), x, y-5);// Numera cada 5 anos}// Marca valores de pagamento ao longo da margem direitag.textAlign = "right";g.textBaseline = "middle";// Alinha o texto à direita// Centraliza verticalmentevar ticks = [monthly*payments, principal];var rightEdge = paymentToX(payments);for(var i = 0; i < ticks.length; i++) {// Os dois pontos que marcaremos// Coordenada X do eixo Y// Para cada um dos 2 pontosvar y = amountToY(ticks[i]);//Calcula a posição Y da marcag.fillRect(rightEdge-3, y-0.5, 3,1);// Desenha a marcaçãog.fillText(String(ticks[i].toFixed(0)), // E a rotula.rightEdge-5, y);}}</script></body></html>
